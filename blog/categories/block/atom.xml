<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Block | 逆风@{iOS}]]></title>
  <link href="http://ios.dehengxu.com/blog/categories/block/atom.xml" rel="self"/>
  <link href="http://ios.dehengxu.com/"/>
  <updated>2015-08-19T17:07:40+08:00</updated>
  <id>http://ios.dehengxu.com/</id>
  <author>
    <name><![CDATA[Deheng Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C Block Usage]]></title>
    <link href="http://ios.dehengxu.com/blog/2015/08/15/objective-c-block-usage/"/>
    <updated>2015-08-15T14:43:40+08:00</updated>
    <id>http://ios.dehengxu.com/blog/2015/08/15/objective-c-block-usage</id>
    <content type="html"><![CDATA[<h2>Block syntax</h2>

<blockquote><p>Block description</p></blockquote>

<h3>1. Use block as callback</h3>

<pre><code>int (^maxBlock)(int, int);
maxBlock = ^(int a, int b) {
    return a &gt; b ? a : b;
}

NSLog(@"max is %d", maxBlock(89, 22));
</code></pre>

<h3>2. Use block as parameter</h3>

<pre><code>- (void)someMethod:(void(^)(void))action;

[self someMethod:^() {
    NSLog(@"Do some operation in block.");
}];
</code></pre>

<h3>3. Use block in recurcive callback</h3>

<pre><code>void testFunc() {
    // It looks well.
    int(^fibonacci)(int) = ^(int n) {
        if (n &lt;= 1) return n;

        return fibonacci(n - 1) + fibonacci(n - 2);
    }

    fibonacci(10);
}
//It raise exception in runtme.
//CompositeTests testExample]_block_invoke(.block_descriptor=0x00007fe0da577710, folder=0x00007fe0da575c50) + 766 at CompositeTests.m:49, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x10)
</code></pre>

<blockquote><p>So, you should add <code>static</code> before block declaring, because at this time block is not created and it raise BAD_ACCESS to memory.</p></blockquote>

<h3>4. <strong>block vs </strong>weak</h3>

<p>我们为了防止 block 将对象进行自动强引用导致出现引用循环，有时候会使用 <strong>block 进行 weakRef 的声明，但是  </strong>weak 也可以达成这个目的，那么 <strong>block 和 </strong>weak 有什么区别呢?</p>

<p>我们通常会这么做，这种情况 <strong>block 和 </strong>weak 似乎看不出什么区别
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>__block weskRef = obj&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;void(^aBlock)() = ^() {
</span><span class='line'>    NSLog@(&ldquo;%@&rdquo;, weakRef);
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;aBlock();&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>可是如果这样呢
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;__block weskRef = obj;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;void(^aBlock)() = ^() {
</span><span class='line'>    NSLog@(&ldquo;%@&rdquo;, weakRef);
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;aBlock();&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;obj = nil;</span></code></pre></td></tr></table></div></figure></p>

<h4>__block</h4>

<blockquote><p>__block 会保证 weakRef 对象一直有效，直到 block 本身不再使用 weakRef 才会真正释放掉 obj</p></blockquote>

<h4>__weak</h4>

<blockquote><p>__weak 则会在 <code>obj = nil</code>  的同时将 weakRef 置为 <code>nil</code>。</p></blockquote>

<p>这就是 <code>__block</code> 和 <code>__weak</code> 的区别。</p>
]]></content>
  </entry>
  
</feed>
