<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objc, | 逆风@[iOS,nil]]]></title>
  <link href="http://ios.dehengxu.com/blog/categories/objc/atom.xml" rel="self"/>
  <link href="http://ios.dehengxu.com/"/>
  <updated>2015-08-29T13:00:21+08:00</updated>
  <id>http://ios.dehengxu.com/</id>
  <author>
    <name><![CDATA[Deheng Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GCD 的常规用法]]></title>
    <link href="http://ios.dehengxu.com/blog/2015/08/23/gcd-de-chang-gui-yong-fa/"/>
    <updated>2015-08-23T15:56:50+08:00</updated>
    <id>http://ios.dehengxu.com/blog/2015/08/23/gcd-de-chang-gui-yong-fa</id>
    <content type="html"><![CDATA[<p>GCD 通过将多线程抽象为 <code>dispatch_queue_t</code> 类型的对象，以 Block 作为计算单元实现的一套基于 C 语言的开源多线程库 <code>libdispatch</code>。</p>

<p>GCD 让多线程开发变的更加方便，简洁。</p>

<p>首先明确几个 GCD 中的特性:</p>

<ol>
<li>全局队列都是异步的。</li>
<li>主队列是同步的。</li>
<li>串行队列中在当前上下文执行同步计算会产生死锁。</li>
</ol>


<h3>创建并行，串行队列</h3>

<pre><code>dispatch_queue_create("q1", DISPATCH_QUEUE_CONCURRENT);
</code></pre>

<pre><code>dispatch_queue_create("q1", DISPATCH_QUEUE_SERIAL);
</code></pre>

<h3>异步执行任务</h3>

<pre><code>disaptch_async(queue, ^() {
    //Todo....
});
</code></pre>

<h3>同步执行任务的方式</h3>

<ol>
<li><p>dispatch_semaphor_t</p>

<pre><code>dispatch_semaphor_t semaphor = disaptch_semaphor_create(1);

dispatch_async(queue, ^() {
    dispatch_semaphor_wait(semaphor);
    //Todo...

    //Finished.
    dispatch_semaphor_signal(semaphor);
});
</code></pre>

<p>创建一个只允许一个线程访问的信号量 <code>disaptch_semaphor_create(1);</code></p>

<p>通知其他访问对象等待 <code>dispatch_semaphor_wait(semaphor);</code></p>

<p>资源访问结束后，退回占用的资源，并通知其他访问对象可以进行访问。 <code>dispatch_semaphor_signal(semaphor);</code></p></li>
<li><p>dispatch_group_wait</p>

<pre><code>dispatch_group_t group = dispatch_group_create();

dispatch_group_async(group, q1, ^ {
    //Task 1.
});

dispatch_group_async(group, q1, ^ {
    //Task 2.
});

dispatch_group_async(group, q1, ^ {
    //Task 3.
});

dispatch_async(queue, ^() {
    dispatch_group_wait(group);
    //Todo....

});
</code></pre>

<p><code>dispatch_group_async</code>: 添加任务到分组中。</p>

<p><code>dispatch_group_wait(group);</code> 等待 group 里的所有任务完成后方可继续。</p></li>
<li><p>dispatch_group_notify</p>

<pre><code>dispatch_group_notify(group, q1, ^ {
    //Todo...

});
</code></pre>

<p><code>dispatch_group_notify</code>: group中的所有任务完成后，执行 block 中的代码。</p></li>
<li><p>dispatch_group_enter, dispatch_group_leave</p>

<pre><code>dispatch_group_enter(group);

dispatch_async(q1, ^ {
    //Todo...

    dispatch_group_leave(group);
});
</code></pre>

<p>该代码等价于:</p>

<pre><code>dispatch_group_async(q1, ^ {
    //Todo...
});
</code></pre>

<p>作用也是将任务放入到 q1 队列中，同时也添加到分组中。</p></li>
</ol>


<h3>使用 apply 来提高并行效率</h3>

<pre><code>    dispatch_apply(5000, q1, ^(size_t i) {
        NSLog(@"%zu",  i);
    });
</code></pre>

<p>你会发现如果 q1 是并发队列，输出的数字是无序的状态。这就是 dispatch_apply 带来的好处，它能快速将当前的迭代任务立刻发送到队列中执行，如果是并发队列，这个效率是很高的。如果你对任务的顺序有要求，或者队列是串行队列，那就不需要使用 dispatch_apply 了。</p>

<h3>dispatch_barrier_async</h3>

<p>障碍异步，意思是通过 dispatch_barrier_async 提交的任务，不会立刻执行，而是会阻碍它之后提交的任务，直到它之前的任务全部完成，它才会执行，并且它执行完毕后，其后提交的任务才能继续进行。</p>

<p>而在 dispatch_barrier_async 之前或者之后的任务都是并发执行的。</p>

<pre><code>dispatch_queue_t q = dispatch_queue_create("test", DISPATCH_QUEUE_CONCURRENT);

dispatch_async(q, ^() {printf("A\n");});
dispatch_async(q, ^() {printf("B\n");});
dispatch_async(q, ^() {printf("C\n");});
dispatch_async(q, ^() {printf("D\n");});

dispatch_barrier_async(q, ^() {printf("barrier\n");});

dispatch_async(q, ^() {printf("E\n");});
dispatch_async(q, ^() {printf("F\n");});
dispatch_async(q, ^() {printf("G\n");});
</code></pre>

<p>输出结果是:</p>

<pre><code>A --
C  |  
D  |--&gt; //顺序随机产生
B _|
barrier //这里的输出位置不会变化
F --
E  |--&gt; //顺序随机产生
G --
</code></pre>

<p>但是 dispatch_barrier_async 只有提交到自己创建的并发队列时，才有上面的效果。如果是全局队列，或者串行队列，那么 dispatch_barrier_async 和 dispatch_async 是等效的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理自由桥接(Toll-Free Bridging)]]></title>
    <link href="http://ios.dehengxu.com/blog/2015/08/22/guan-li-zi-you-qiao-jie-toll-free-bridging/"/>
    <updated>2015-08-22T18:21:12+08:00</updated>
    <id>http://ios.dehengxu.com/blog/2015/08/22/guan-li-zi-you-qiao-jie-toll-free-bridging</id>
    <content type="html"><![CDATA[<p>在很多 Cocoa 应用程序中，你需要使用 Core Foundation 风格的对象，有的来自 Core Foundation 框架自己(像：<a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFArrayRef/index.html#//apple_ref/c/tdef/CFArrayRef">CFArrayRef</a> 或 <a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFMutableDictionaryRef/index.html#//apple_ref/c/tdef/CFMutableDictionaryRef">CFMutaleDictionaryRef</a>) 或者来自于适配了 Core Foudation 大会例如 Core Graphics (你可能使用这些类型：<a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGColorSpace/index.html#//apple_ref/c/tdef/CGColorSpaceRef">CGColorSpaceRef</a> 和  <a href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CGGradient/index.html#//apple_ref/c/tdef/CGGradientRef">CGGradientRef</a>)。</p>

<p>编译器不会自动管理 Core Foundation 对象的生命期；你必须调用 <a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFTypeRef/index.html#//apple_ref/c/func/CFRetain">CFRetain</a> 和 <a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFTypeRef/index.html#//apple_ref/c/func/CFRelease">CFRelease</a> (或者响应类型指定的变体) 就像 Core Foundation 内存管理规则中描述的(见 <a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Conceptual/CFMemoryMgmt/CFMemoryMgmt.html#//apple_ref/doc/uid/10000127i">Memory Management Programming</a>)。</p>

<p>如果你在 Objective-C 和 Core Foundation 风格对象之间互相转换，你需要告诉编译器使用转换(定义在 objc/runtime.h中)或者 Core Foundation 风格的宏(定义在 NSObjecti.h中) 对象所拥有的的语义关系:</p>

<ul>
<li><p>__bridge 在 Objective-C 和 Core Foundation 之间转换指针，而不需要传递所有权。</p></li>
<li><p>__bridge_retained 或 CFBridgingRetain 转换 Objective-C 指针为 Core Foundation 指针，并且传递对象所有权给你，你负责进行 CFRelease 调用，或者调用相关的函数释放对象所有权。</p></li>
<li><p>__bridge_transfer 或 CFBridgingRelease 移动非 Objective-C 指针到 Objective-C ，同时传递所有权到 ARC。 ARC 负责释放对象的所有权。</p></li>
</ul>


<p>举个例子，如果你曾经这样写过代码：</p>

<pre><code>- (void)logFirstNameOfPerson:(ABRecordRef)person {

    NSString *name = (NSString *)ABRecordCopyValue(person, kABPersonFirstNameProperty);
    NSLog(@"Person's first name: %@", name);
    [name release];
}
</code></pre>

<p>你可以替换成：</p>

<pre><code>- (void)logFirstNameOfPerson:(ABRecordRef)person {

    NSString *name = (NSString *)CFBridgingRelease(ABRecordCopyValue(person, kABPersonFirstNameProperty));
    NSLog(@"Person's first name: %@", name);
}
</code></pre>

<h3>编译器处理从 Cocoa 方法中返回的 CF 对象</h3>

<p>编译器根据历史上的 Cocoa 命名规则理解那些返回 Core Foundation 类型的 Objective-C 方法(见: <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i">Advanced Memory Management Programming Guide</a>)。例如，编译器知道,iOS 中 CGColor 通过 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIColor_Class/index.html#//apple_ref/occ/cl/UIColor">UIColor</a> 的 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIColor_Class/index.html#//apple_ref/occ/instp/UIColor/CGColor">CGColor</a> 方法返回的对象不属于这个规则。你必须使用合适的类型转换，看下面的代码：</p>

<pre><code>NSMutableArray *colors = [NSMutableArray arrayWithObject:(id)[[UIColor darkGrayColor] CGColor]];
[colors addObject:(id)[[UIColor lightGrayColor] CGColor]];
</code></pre>
]]></content>
  </entry>
  
</feed>
