<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[逆风@{iOS}]]></title>
  <link href="http://xudeheng.github.io/ios_tech_octopress/atom.xml" rel="self"/>
  <link href="http://xudeheng.github.io/ios_tech_octopress/"/>
  <updated>2015-08-19T05:49:32+08:00</updated>
  <id>http://xudeheng.github.io/ios_tech_octopress/</id>
  <author>
    <name><![CDATA[Deheng Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Autorelease方法的源码分析]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/18/autoreleasefang-fa-deyuan-ma-fen-xi/"/>
    <updated>2015-08-18T10:51:06+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/18/autoreleasefang-fa-deyuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline id autorelease(id obj)
</span><span class='line'>{
</span><span class='line'>    assert(obj);
</span><span class='line'>    assert(!obj-&gt;isTaggedPointer());
</span><span class='line'>    id *dest __unused = autoreleaseFast(obj);
</span><span class='line'>    assert(!dest  ||  *dest == obj);
</span><span class='line'>    return obj;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果指针没有被标记，则进行 autoreleaseFast 处理过程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline id *autoreleaseFast(id obj)
</span><span class='line'>{
</span><span class='line'>    AutoreleasePoolPage *page = hotPage();
</span><span class='line'>    if (page && !page-&gt;full()) {
</span><span class='line'>        return page-&gt;add(obj);
</span><span class='line'>    } else if (page) {
</span><span class='line'>        return autoreleaseFullPage(obj, page);
</span><span class='line'>    } else {
</span><span class='line'>        return autoreleaseNoPage(obj);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static __attribute__((noinline))
</span><span class='line'>id *autoreleaseFullPage(id obj, AutoreleasePoolPage *page)
</span><span class='line'>{
</span><span class='line'>    // The hot page is full. 
</span><span class='line'>    // Step to the next non-full page, adding a new page if necessary.
</span><span class='line'>    // Then add the object to that page.
</span><span class='line'>    assert(page == hotPage()  &&  page-&gt;full());
</span><span class='line'>
</span><span class='line'>    do {
</span><span class='line'>        if (page-&gt;child) page = page-&gt;child;
</span><span class='line'>        else page = new AutoreleasePoolPage(page);
</span><span class='line'>    } while (page-&gt;full());
</span><span class='line'>
</span><span class='line'>    setHotPage(page);
</span><span class='line'>    return page-&gt;add(obj);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static __attribute__((noinline))
</span><span class='line'>id *autoreleaseNoPage(id obj)
</span><span class='line'>{
</span><span class='line'>    // No pool in place.
</span><span class='line'>    assert(!hotPage());
</span><span class='line'>
</span><span class='line'>    if (obj != POOL_SENTINEL  &&  DebugMissingPools) {
</span><span class='line'>        // We are pushing an object with no pool in place, 
</span><span class='line'>        // and no-pool debugging was requested by environment.
</span><span class='line'>        _objc_inform("MISSING POOLS: Object %p of class %s "
</span><span class='line'>                     "autoreleased with no pool in place - "
</span><span class='line'>                     "just leaking - break on "
</span><span class='line'>                     "objc_autoreleaseNoPool() to debug", 
</span><span class='line'>                     (void*)obj, object_getClassName(obj));
</span><span class='line'>        objc_autoreleaseNoPool(obj);
</span><span class='line'>        return nil;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // Install the first page.
</span><span class='line'>    AutoreleasePoolPage *page = new AutoreleasePoolPage(nil);
</span><span class='line'>    setHotPage(page);
</span><span class='line'>
</span><span class='line'>    // Push an autorelease pool boundary if it wasn't already requested.
</span><span class='line'>    if (obj != POOL_SENTINEL) {
</span><span class='line'>        page-&gt;add(POOL_SENTINEL);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // Push the requested object.
</span><span class='line'>    return page-&gt;add(obj);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>每个 page  的大小是 4096 ，指的是能存储 4096 个对象地址。</p>

<p>如果 <code>page-&gt;full()</code> 已满，则(通过 <code>autoreleaseFullPage(obj, page);</code>)自动从子节点中寻找一个未满的 page 添加新的对象，如果所有子节点都满了，就会创建一个新的page 并让 hotPage 指向这个新的 page，最后添加进新的对象。</p>

<p>如果没有任何的 page，则创建第一个 page，并添加一个 POOL_SENTINEL 作为边界，然后添加这个新的 obj 对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libdispatch 源码分析]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/18/libdispatch-yuan-ma-fen-xi/"/>
    <updated>2015-08-18T08:57:37+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/18/libdispatch-yuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<p>GCD 是苹果的多线程框架，提供了大量便捷的特性，允许用户利用多核 cpu 技术 ，使用中，最常接触的是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dispatch_queue_t dispatch_get_global_queue()
</span><span class='line'>
</span><span class='line'>dispatch_queue_t dispatch_queue_create()
</span><span class='line'>
</span><span class='line'>void dispatch_async()
</span><span class='line'>
</span><span class='line'>dispatch_semaphore_t dispatch_semaphor_create()
</span></code></pre></td></tr></table></div></figure>


<h3>关键词</h3>

<p>后面的描述中会用到一下几个关键词:</p>

<p><code>dq</code>: dispatch_queue 的简写</p>

<p><code>qos</code>: quality of service 的简写</p>

<p>GCD 虽然好用，但对于 GCD 的底层实现我们却知之甚少，好在苹果开源了 GCD 的源码项目 libdispatch，我们可以在这里下载目前最新的版本 <a href="http://opensource.apple.com/tarballs/libdispatch/libdispatch-442.1.4.tar.gz">libdispatch</a></p>

<h3>dispatch_queue_create() 函数</h3>

<p>我们来看看 dispatch_queue_create 函数的定义</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dispatch_queue_t
</span><span class='line'>dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
</span><span class='line'>{
</span><span class='line'>  return dispatch_queue_create_with_target(label, attr,
</span><span class='line'>          DISPATCH_TARGET_QUEUE_DEFAULT);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>可以看到，其实 dispatch_queue_create 调用了私有函数 dispatch_queue_create_with_target ，移步到源码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// skip zero
</span><span class='line'>// 1 - main_q
</span><span class='line'>// 2 - mgr_q
</span><span class='line'>// 3 - mgr_root_q
</span><span class='line'>// 4,5,6,7,8,9,10,11,12,13,14,15 - global queues
</span><span class='line'>// we use 'xadd' on Intel, so the initial value == next assigned
</span><span class='line'>unsigned long volatile _dispatch_queue_serial_numbers = 16;
</span><span class='line'>
</span><span class='line'>dispatch_queue_t
</span><span class='line'>dispatch_queue_create_with_target(const char *label, dispatch_queue_attr_t dqa,
</span><span class='line'>      dispatch_queue_t tq)
</span><span class='line'>{
</span><span class='line'>#if DISPATCH_USE_NOQOS_WORKQUEUE_FALLBACK
</span><span class='line'>  // Be sure the root queue priorities are set
</span><span class='line'>  dispatch_once_f(&_dispatch_root_queues_pred, NULL,
</span><span class='line'>          _dispatch_root_queues_init);
</span><span class='line'>#endif
</span><span class='line'>  bool disallow_tq = (slowpath(dqa) && dqa != DISPATCH_QUEUE_CONCURRENT);
</span><span class='line'>  if (!slowpath(dqa)) {
</span><span class='line'>      dqa = _dispatch_get_queue_attr(0, 0, false, false);
</span><span class='line'>  } else if (dqa-&gt;do_vtable != DISPATCH_VTABLE(queue_attr)) {
</span><span class='line'>      DISPATCH_CLIENT_CRASH("Invalid queue attribute");
</span><span class='line'>  }
</span><span class='line'>  dispatch_queue_t dq = _dispatch_alloc(DISPATCH_VTABLE(queue),
</span><span class='line'>          sizeof(struct dispatch_queue_s) - DISPATCH_QUEUE_CACHELINE_PAD);
</span><span class='line'>  _dispatch_queue_init(dq);
</span><span class='line'>  if (label) {
</span><span class='line'>      dq-&gt;dq_label = strdup(label);
</span><span class='line'>  }
</span><span class='line'>  qos_class_t qos = dqa-&gt;dqa_qos_class;
</span><span class='line'>  bool overcommit = dqa-&gt;dqa_overcommit;
</span><span class='line'>#if HAVE_PTHREAD_WORKQUEUE_QOS
</span><span class='line'>  dq-&gt;dq_priority = _pthread_qos_class_encode(qos, dqa-&gt;dqa_relative_priority,
</span><span class='line'>          overcommit);
</span><span class='line'>#endif
</span><span class='line'>  if (dqa-&gt;dqa_concurrent) {
</span><span class='line'>      dq-&gt;dq_width = DISPATCH_QUEUE_WIDTH_MAX;
</span><span class='line'>  } else {
</span><span class='line'>      // Default serial queue target queue is overcommit!
</span><span class='line'>      overcommit = true;
</span><span class='line'>  }
</span><span class='line'>  if (!tq) {
</span><span class='line'>      if (qos == _DISPATCH_QOS_CLASS_UNSPECIFIED) {
</span><span class='line'>          qos = _DISPATCH_QOS_CLASS_DEFAULT;
</span><span class='line'>      }
</span><span class='line'>#if DISPATCH_USE_NOQOS_WORKQUEUE_FALLBACK
</span><span class='line'>      if (qos == _DISPATCH_QOS_CLASS_USER_INTERACTIVE &&
</span><span class='line'>              !_dispatch_root_queues[
</span><span class='line'>              DISPATCH_ROOT_QUEUE_IDX_USER_INTERACTIVE_QOS].dq_priority) {
</span><span class='line'>          qos = _DISPATCH_QOS_CLASS_USER_INITIATED;
</span><span class='line'>      }
</span><span class='line'>#endif
</span><span class='line'>      bool maintenance_fallback = false;
</span><span class='line'>#if DISPATCH_USE_NOQOS_WORKQUEUE_FALLBACK
</span><span class='line'>      maintenance_fallback = true;
</span><span class='line'>#endif // DISPATCH_USE_NOQOS_WORKQUEUE_FALLBACK
</span><span class='line'>      if (maintenance_fallback) {
</span><span class='line'>          if (qos == _DISPATCH_QOS_CLASS_MAINTENANCE &&
</span><span class='line'>                  !_dispatch_root_queues[
</span><span class='line'>                  DISPATCH_ROOT_QUEUE_IDX_MAINTENANCE_QOS].dq_priority) {
</span><span class='line'>              qos = _DISPATCH_QOS_CLASS_BACKGROUND;
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      tq = _dispatch_get_root_queue(qos, overcommit);
</span><span class='line'>      if (slowpath(!tq)) {
</span><span class='line'>          DISPATCH_CLIENT_CRASH("Invalid queue attribute");
</span><span class='line'>      }
</span><span class='line'>  } else {
</span><span class='line'>      _dispatch_retain(tq);
</span><span class='line'>      if (disallow_tq) {
</span><span class='line'>          // TODO: override target queue's qos/overcommit ?
</span><span class='line'>          DISPATCH_CLIENT_CRASH("Invalid combination of target queue & "
</span><span class='line'>                  "queue attribute");
</span><span class='line'>      }
</span><span class='line'>      _dispatch_queue_priority_inherit_from_target(dq, tq);
</span><span class='line'>  }
</span><span class='line'>  _dispatch_queue_set_override_priority(dq);
</span><span class='line'>  dq-&gt;do_targetq = tq;
</span><span class='line'>  _dispatch_object_debug(dq, "%s", __func__);
</span><span class='line'>  return _dispatch_introspection_queue_create(dq);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>看几个关键的地方</p>

<p><code>_dispatch_queue_init(dq);</code></p>

<p><code>dq-&gt;dq_width = DISPATCH_QUEUE_WIDTH_MAX;</code></p>

<h3>dispatch_async()</h3>

<p><code>dispatch_async()</code> 会调用 <code>_dispatch_async_f()</code> 完成真正的异步派发任务的操作。</p>

<p>_dispatch_async_f() 中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (dq-&gt;dq_width == 1 || flags & DISPATCH_BLOCK_BARRIER) {
</span><span class='line'>  return _dispatch_barrier_async_f(dq, ctxt, func, pp, flags);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>说明当队列宽度为1 的时候，会自动通过 <code>_dispatch_barrier_async_f</code> 加入到等待队列中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dc = fastpath(_dispatch_continuation_alloc_cacheonly());
</span><span class='line'>if (!dc) {
</span><span class='line'>  return _dispatch_async_f_slow(dq, ctxt, func, pp, flags);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>从缓存中获取继续运行的队列如果没有，就通过 _dispatch_async_f_slow 从堆上面创建一个队列</p>

<h3>dispatch_sync</h3>

<h3>dispatch_get_global_queue</h3>

<p><code>
return _dispatch_get_root_queue(qos, flags &amp; DISPATCH_QUEUE_OVERCOMMIT);
</code></p>

<p>通过全局 dq 的优先级别设置好 qos 属性，在从队列池 <code>_dispatch_root_queues[]</code> 中，取出一个 dq 出来，类似于这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>return &_dispatch_root_queues[
</span><span class='line'>              DISPATCH_ROOT_QUEUE_IDX_MAINTENANCE_QOS_OVERCOMMIT];</span></code></pre></td></tr></table></div></figure>


<p>得到的队列底层代码信息:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[DISPATCH_ROOT_QUEUE_IDX_MAINTENANCE_QOS_OVERCOMMIT] = {
</span><span class='line'>      .do_vtable = DISPATCH_VTABLE(queue_root),
</span><span class='line'>      .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,
</span><span class='line'>      .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,
</span><span class='line'>      .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,
</span><span class='line'>      .do_ctxt = &_dispatch_root_queue_contexts[
</span><span class='line'>              DISPATCH_ROOT_QUEUE_IDX_MAINTENANCE_QOS_OVERCOMMIT],
</span><span class='line'>      .dq_label = "com.apple.root.maintenance-qos.overcommit",
</span><span class='line'>      .dq_running = 2,
</span><span class='line'>      .dq_width = DISPATCH_QUEUE_WIDTH_MAX,
</span><span class='line'>      .dq_serialnum = 5,
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple Open Source]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/17/apple-open-source/"/>
    <updated>2015-08-17T10:04:40+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/17/apple-open-source</id>
    <content type="html"><![CDATA[<p><a href="http://opensource.apple.com/tarballs/">Apple Open Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用现代Objective-C]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/16/shi-yong-xian-dai-objective-c/"/>
    <updated>2015-08-16T15:32:41+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/16/shi-yong-xian-dai-objective-c</id>
    <content type="html"><![CDATA[<p>现代 Objective-C 比传统 Objective-C 增加了很多优雅的语法和特性。</p>

<h3>instancetype</h3>

<p>instancetype 和 id de区别在于 instancetype 返回值在编译时会将对象与对应的类进行方法匹配，而 id 则作为万用类型，不会提示任何的警告，因为 id 类型包含所有类型，所以发送任何消息，编译器都认为是正确的。这就造成了安全隐患，也是Apple 极力推荐使用 instancetype 的原因。</p>

<h3>Properties</h3>

<h3>枚举宏</h3>

<p>将 enum 换成 NS_ENUM 和 NS_OPTIONS</p>

<h3>对象初始化</h3>

<blockquote><p>宏 NS_DESIGNATED_INITIALIZER</p></blockquote>

<h3>自动引用计数 ARC</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Plugins & Tools for Xcode]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/16/useful-plugins-and-tools-for-xcode/"/>
    <updated>2015-08-16T08:13:33+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/16/useful-plugins-and-tools-for-xcode</id>
    <content type="html"><![CDATA[<h3>Synx</h3>

<blockquote><p>A command line tool used for reform folder hierachy of Xcode, it can make a real folder for &lsquo;Group&rsquo; in Xcode project and make folder hierachy looks pretty.</p></blockquote>

<p>Usage:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>synx SomeProject.xcodeproj
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式-访问者模式]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/16/design-pattern-visitor/"/>
    <updated>2015-08-16T08:05:25+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/16/design-pattern-visitor</id>
    <content type="html"><![CDATA[<h3>模式说明：</h3>

<blockquote><p>访问者模式(Visitor Pattern)，是一种具有双分派能力的模式，它通过 Visitor 接口约定为已有类 Element 进行扩展，扩展的目标是尽可能少的修改已有类 Element ，在 Visitor 中增加新扩展的接口，对 Element 中的现有接口进行访问。而 Visitor 以外的部分，不需要知道 Element 的具体实现和操作，进行了封装。
所谓<code>双分派</code>指的是，该模式可以通过不同的 <code>Visitor</code> 对不同的 <code>Element</code> 进行访问。</p></blockquote>

<p>举例：</p>

<blockquote><p>场景介绍，以学校为背景，引入 Teacher, Student, Parent 三类人作为已有类型， 引入 ConcreteVisitor 作为 Visitor 的具体实现类，对以上三者进行扩展。</p>

<p><code>ElementProtocol</code> 作为 Teacher, Student, Parent 的公共接口协议。
<code>VisitorProtocol</code> 作为访问者的公共接口协议。
<code>Teacher, Student, Parent</code> 三者是具体的 Element 实现。
<code>ConcreteVisitor</code> 是具体的 Visitor 实现。</p></blockquote>

<p>当学校外面的人需要访问 <code>Teacher</code> 的时候，不需要直接与 <code>Teacher</code> 交流，而是去找 <code>ConcreteVisitor</code> 通过它与 <code>Teacher</code> 进行交流。</p>

<p><a href="git@github.com:xudeheng/ObjcDesignPatterns.git">Objective-c源码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中的协议引用头文件的问题]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/16/objective-czhong-de-xie-yi-yin-yong-tou-wen-jian-de-wen-ti/"/>
    <updated>2015-08-16T00:59:41+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/16/objective-czhong-de-xie-yi-yin-yong-tou-wen-jian-de-wen-ti</id>
    <content type="html"><![CDATA[<p>Objective-C 中循环引用头文件，会导致，头文件中声明的符号无法识别的问题。典型的问题是:</p>

<p>类 <code>SomeClass</code> 不被识别，必须在头文件中通过前导生命的方式让编译器认识该类 <code>@class SomeClass;</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用23种设计模式简介]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/15/chang-yong-23chong-she-ji-mo-shi-jian-jie/"/>
    <updated>2015-08-15T23:47:51+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/15/chang-yong-23chong-she-ji-mo-shi-jian-jie</id>
    <content type="html"><![CDATA[<p>根据设计模式的作用分类，23种设计模式可以分为以下几类:</p>

<h3>对象创建</h3>

<p>单例模式，工厂模式，抽象工厂，原型模式，生成器模式</p>

<h3>接口适配</h3>

<p>适配器模式，桥接模式，外观模式</p>

<h3>对象解耦</h3>

<p>中介者模式，观察者模式</p>

<h3>抽象集合</h3>

<p>组合模式，迭代器模式</p>

<h3>行为</h3>

<p>访问者模式, 装饰器模式，责任链模式</p>

<h3>逻辑封装</h3>

<p>模板方法，策略模式，命令模式</p>

<h3>对象访问</h3>

<p>享元模式，代理模式</p>

<h3>对象状态</h3>

<p>备忘录模式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式-观察者模式]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/15/design-pattern-observer/"/>
    <updated>2015-08-15T23:46:46+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/15/design-pattern-observer</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Block Usage]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/15/objective-c-block-usage/"/>
    <updated>2015-08-15T14:43:40+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/15/objective-c-block-usage</id>
    <content type="html"><![CDATA[<h2>Block syntax</h2>

<p><a href="http://clang.llvm.org/docs/Block-ABI-Apple.html" target="_blank">block 官方文档</a></p>

<blockquote><p>Block description</p></blockquote>

<h3>1. Use block as callback</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int (^maxBlock)(int, int);
</span><span class='line'>maxBlock = ^(int a, int b) {
</span><span class='line'>  return a &gt; b ? a : b;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>NSLog(@"max is %d", maxBlock(89, 22));
</span></code></pre></td></tr></table></div></figure>


<h3>2. Use block as parameter</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)someMethod:(void(^)(void))action;
</span><span class='line'>
</span><span class='line'>[self someMethod:^() {
</span><span class='line'>  NSLog(@"Do some operation in block.");
</span><span class='line'>}];
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Use block in recurcive callback</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void testFunc() {
</span><span class='line'>  // It looks well.
</span><span class='line'>  int(^fibonacci)(int) = ^(int n) {
</span><span class='line'>      if (n &lt;= 1) return n;
</span><span class='line'>
</span><span class='line'>      return fibonacci(n - 1) + fibonacci(n - 2);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  fibonacci(10);
</span><span class='line'>}
</span><span class='line'>//It raise exception in runtme.
</span><span class='line'>//CompositeTests testExample]_block_invoke(.block_descriptor=0x00007fe0da577710, folder=0x00007fe0da575c50) + 766 at CompositeTests.m:49, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x10)
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>So, you should add <code>static</code> before block declaring, because at this time block is not created and it raise BAD_ACCESS to memory.</p></blockquote>

<h3>4. <strong>block vs </strong>weak</h3>

<p>我们为了防止 block 将对象进行自动强引用导致出现引用循环，有时候会使用 <strong>block 进行 weakRef 的声明，但是  </strong>weak 也可以达成这个目的，那么 <strong>block 和 </strong>weak 有什么区别呢?</p>

<p>我们通常会这么做，这种情况 <strong>block 和 </strong>weak 似乎看不出什么区别</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>__block weskRef = obj
</span><span class='line'>
</span><span class='line'>void(^aBlock)() = ^() {
</span><span class='line'>  NSLog@("%@", weakRef);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>aBlock();
</span></code></pre></td></tr></table></div></figure>


<p>可是如果这样呢</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>__block weskRef = obj;
</span><span class='line'>
</span><span class='line'>void(^aBlock)() = ^() {
</span><span class='line'>  NSLog@("%@", weakRef);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>aBlock();
</span><span class='line'>
</span><span class='line'>obj = nil;</span></code></pre></td></tr></table></div></figure>


<h4>__block</h4>

<blockquote><p>__block 会保证 weakRef 对象一直有效，直到 block 本身不再使用 weakRef 才会真正释放掉 obj</p></blockquote>

<h4>__weak</h4>

<blockquote><p>__weak 则会在 <code>obj = nil</code>  的同时将 weakRef 置为 <code>nil</code>。</p></blockquote>

<p>这就是 <code>__block</code> 和 <code>__weak</code> 的区别。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Rake]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/15/hello-rake/"/>
    <updated>2015-08-15T00:00:00+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/15/hello-rake</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to Jekyll!]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/06/welcome-to-jekyll/"/>
    <updated>2015-08-06T22:19:25+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2015/08/06/welcome-to-jekyll</id>
    <content type="html"><![CDATA[<p>You’ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">&quot;Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">&#39;Tom&#39;</span><span class="p">)</span>
<span class="c1">#=&gt; prints &#39;Hi, Tom&#39; to STDOUT.</span></code></pre></div>


<p>Check out the <a href="http://jekyllrb.com">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://github.com/jekyll/jekyll-help">Jekyll’s dedicated Help repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keys for Using Jekyll on github.com]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2014/08/31/keys-for-using-jekyll-on-github-dot-com/"/>
    <updated>2014-08-31T11:48:21+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2014/08/31/keys-for-using-jekyll-on-github-dot-com</id>
    <content type="html"><![CDATA[<h2>Why choose jekyll?</h2>

<ol>
<li>First, it&rsquo;s an static blog system, so it can response huge accessing.</li>
<li>You don&rsquo;t need configure your http server, sql server, and blog system, you can host your own blog site only depend <code>rvm</code>.</li>
<li>If you don&rsquo;t wanna maintance your own server, you can use github&rsquo;s : )</li>
</ol>


<h2>How to install all of jekyll.</h2>

<h4>Install rvm a ruby version management tool.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class=''></code></pre></td></tr></table></div></figure>


<h4>Install jekyll gem.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install jekyll</span></code></pre></td></tr></table></div></figure>


<h4>Install depended gems</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundle
</span><span class='line'>
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>All done, you can take rest.</p>

<h2>How to use jekyll with github.com</h2>

<p>You can find some tips on this page:<br/>
<a href="https://help.github.com/articles/using-jekyll-with-pages">https://help.github.com/articles/using-jekyll-with-pages</a>.</p>

<h2>Why your blog looks poorly.</h2>

<p>Follow this link <a href="http://jekyllrb.com/docs/github-pages/">http://jekyllrb.com/docs/github-pages/</a></p>

<blockquote><p>It figure out you should modify _config.yml, filed <code>base_url</code> value to <code>/your_repository_name</code>, the slash must be there.</p></blockquote>

<h2>Use your own domain</h2>

<p>Add CNAME file to your repostory root dirctory. Writre your domain in one line.</p>

<h2>Final</h2>

<p>That&rsquo;s all, just go writing valuable articles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Config Java Envir on OSX]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2014/08/30/config-java-envir-on-osx/"/>
    <updated>2014-08-30T14:45:49+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2014/08/30/config-java-envir-on-osx</id>
    <content type="html"><![CDATA[<p>Error message:</p>

<blockquote><p>/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/bin: No such file or directory</p></blockquote>

<p>Reason:</p>

<blockquote><p>JAVA_HOME environment variable incorrect, It should be below.</p></blockquote>

<p>Add line into file <code>~/.profile</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH="$PATH:/usr"</span></code></pre></td></tr></table></div></figure>


<p>路径根据实际情况来定，有的系统可能是<code>/usr/local/java</code></p>

<p>我的路径布局是 <code>/usr/bin</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to Jekyll!]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2014/08/29/welcome-to-jekyll/"/>
    <updated>2014-08-29T21:46:06+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2014/08/29/welcome-to-jekyll</id>
    <content type="html"><![CDATA[<p>You’ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve --watch</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">&quot;Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">&#39;Tom&#39;</span><span class="p">)</span>
<span class="c1">#=&gt; prints &#39;Hi, Tom&#39; to STDOUT.</span></code></pre></div>


<p>Check out the <a href="http://jekyllrb.com">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://github.com/jekyll/jekyll-help">Jekyll’s dedicated Help repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rake Usage]]></title>
    <link href="http://xudeheng.github.io/ios_tech_octopress/blog/2014/08/29/rake-usage/"/>
    <updated>2014-08-29T14:42:06+08:00</updated>
    <id>http://xudeheng.github.io/ios_tech_octopress/blog/2014/08/29/rake-usage</id>
    <content type="html"><![CDATA[<h2>What is rake</h2>

<p>Rake is a ruby build tool likes ant, make&hellip;</p>

<p>In ant, it composed with <code>taget</code>s, but in rake it composed with <code>task</code></p>

<h2>Add your task</h2>

<h3>Normal task</h3>

<p>Define your own task</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">task</span> <span class="ss">:taskName</span> <span class="k">do</span>
    <span class="c1">#Your task code in ruby syntax.</span>
<span class="k">end</span></code></pre></div>


<h3>Task with params.</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>task :taskName, :param1 do |t, params|
</span><span class='line'>  #Here params is an hash table object.
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<blockquote><p><a href="http://jasonseifer.com/2010/04/06/rake-tutorial">http://jasonseifer.com/2010/04/06/rake-tutorial</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
